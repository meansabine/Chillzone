import "menuFuncs.del";
import "roleManagement.del";
import "roleSetup.del";
import "parameterSel.del";
import "cmdExec.del";
import "cmdFuncs.del";
import "cmdBools.del";
import "stringCollections.del";
import "prep.del";
import "orb.del";
import "pages.del";
import "portals.del";
import "statusMgr.del";
import "procCmdAttr.del";
import "jumppad.del";
import "skirmish.json";
import "zipline.del";

globalvar define consoleString;
globalvar define consoleViewers;
playervar define allowedCMDS;
playervar define menuOpen;
playervar define role;

playervar define baseMenuEnt;
playervar define menuEnt;


playervar define selectionString;

playervar define arrayCollection;
playervar define numMin;
playervar define numMax;

playervar define currParam;
playervar define paramIndex;
playervar define argCollection;
playervar define numArg;

playervar define selectedIndex;
playervar define selectedCMD;
playervar define stringCMD;

playervar define tempNumSel;

playervar define tempStrings !;
//[0] - On/Off switch thingy
//[1] - Num Selection
//[2] - command desc.
playervar define execList;
//[x][0] - Command
//[x][1] - Arguments
//[x][2] - Full String



playervar define execString;
playervar define isExecuting;
playervar define tempEffect;
playervar define poisonID;
playervar define scalar;
//MV8Z8

playervar define numSliderID !;
playervar define maxNumRate !;

rule: "Toggle On"
    Event.OngoingPlayer
    if (IsButtonHeld(EventPlayer(), Button.Interact) && !IsButtonHeld(EventPlayer(), Button.Ultimate))
    if (!menuOpen)
    if (menuAccessible)
    {
        OpenMenu();
        Wait(0.1);
        menuOpen = true;
    }

rule: "Toggle Off"
    Event.OngoingPlayer
    if (IsButtonHeld(EventPlayer(), Button.Ultimate) && !IsButtonHeld(EventPlayer(), Button.Interact))
    if (menuOpen)
    {
        Wait(0.276);
        AbortIfConditionIsFalse();
        CloseMenu(EventPlayer());
        Wait(0.1);
        menuOpen = false;
    }

void DisableControls() playervar "Disable Controls"
{
    SetPrimaryFireEnabled(EventPlayer(), false);
    SetSecondaryFireEnabled(EventPlayer(), false);
    SetAbility1Enabled(EventPlayer(), false);
    SetAbility2Enabled(EventPlayer(), false);
    SetUltimateAbilityEnabled(EventPlayer(), false);
    SetMeleeEnabled(EventPlayer(), false);
}

void EnableControls(define player) playervar "Enable Controls"
{
    if (!ReturnBool("Admin Orb", player) && !ReturnBool("Zipline Creation Mode", EventPlayer()))
    {
        if (!ReturnBool("Aimbot", player) && !ReturnBool("Zipline Creation Mode", EventPlayer()))
        {
            SetAbility2Enabled(player, true);
        }
        SetSecondaryFireEnabled(player, true);
    }
    if (!ReturnBool("Zipline Creation Mode", EventPlayer()))
    {
        SetPrimaryFireEnabled(player, true);
        SetAbility1Enabled(player, true);
        SetAbility2Enabled(player, true);
        SetSecondaryFireEnabled(player, true);
    }
    SetMeleeEnabled(EventPlayer(), true);
}

void OpenMenu() playervar "Open Menu"
{
    arrayCollection = allowedCMDS;
    CreateHudText(EventPlayer(),
        null,
        <" \n\n\n\n[CHILLZONE MENU (Access to <0>/<1> CMDS)] \n <2>", CountOf(allowedCMDS), CountOf(userCMDS) + CountOf(ownerCMDS) + CountOf(adminCMDS), selectionString>,
        <" <0> <1> \n <2> <3> \n <4> <5> \n <6> <7> \n <8> <9> \n <10> <11> \n <12> <13> \n <14> <15> \n <16> <17> \n <18> <19> \n [Page <20> / <21>]", selectionCursor[0], currPage[0], selectionCursor[1], currPage[1] ,selectionCursor[2], currPage[2], selectionCursor[3], currPage[3], selectionCursor[4], currPage[4], selectionCursor[5], currPage[5], selectionCursor[6], currPage[6], selectionCursor[7], currPage[7], selectionCursor[8], currPage[8], selectionCursor[9], currPage[9], pageIndex + 1, CountOf(pageCollection)>,
        Location.Top,
        2,
        Color.White,
        Color.Rose,
        Color.White,
        HudTextRev.String,
        Spectators.DefaultVisibility);
    baseMenuEnt[0] = LastTextID();
    Wait(0.2);
    CreateHudText(EventPlayer(),
        null,
        tempStrings[2],
        <" \nCommand Selected: <0>", stringCMD>,
        Location.Top,
        3,
        Color.White,
        Color.White,
        Color.White,
        HudTextRev.String,
        Spectators.DefaultVisibility);
    baseMenuEnt[1] = LastTextID();
    PageSetup(allowedCMDS);
    stringCMD = <"No command selected">;
    selectionString = <"Select a command">;
    tempStrings[0] = " ";
    tempStrings[1] = " ";
    numArg = " ";
    DisableControls();
    DisableGameModeHud(EventPlayer());
    if (pastPageInfo[0] <= CountOf(pageCollection) - 1)
    {
        currPage = pageCollection[pastPageInfo[0]];
        pageIndex = pastPageInfo[0];
    }
}

void CloseMenu(define player !)
{
    ResetMenu(player);
    player.menuOpen = false;
    DestroyHudText(player.baseMenuEnt[0]);
    DestroyHudText(player.baseMenuEnt[1]);
    DestroyProgressBarHudText(numSliderID);
    EnableControls(player);
    EnableGameModeHud(EventPlayer());
}

rule: "Add To Index"
    Event.OngoingPlayer
    if (menuOpen)
    if (IsButtonHeld(EventPlayer(), Button.PrimaryFire))
    if (currParam != "Num")
    {
        selectionCursor[selectedIndex] = " ";
        if (selectedIndex == TrueCount(currPage) - 1)
        {
            selectedIndex = 0;
            selectionCursor[selectedIndex] = ">";
            Abort();
        }
        selectedIndex += 1;
        selectionCursor[selectedIndex] = ">";
    }

rule: "Subtract Index"
    Event.OngoingPlayer
    if (menuOpen)
    if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
    if (currParam != "Num")
    {
        selectionCursor[selectedIndex] = " ";
        if (selectedIndex == 0) 
        {
            selectedIndex = TrueCount(currPage) - 1;
            selectionCursor[selectedIndex] = ">";
            Abort();
        }
        selectedIndex -= 1;
        selectionCursor[selectedIndex] = ">";
    }

rule: "Add To Index Page"
    Event.OngoingPlayer
    if (menuOpen)
    if (selectedCMD == null || currParam == "Array")
    if (IsButtonHeld(EventPlayer(), Button.Ability2))
    {
        selectionCursor[selectedIndex] = " ";
        selectedIndex = 0;
        selectionCursor[0] = ">";
        if (pageIndex == CountOf(pageCollection) - 1)
        {
            pageIndex = 0;
            currPage = pageCollection[pageIndex];
            Abort();
        }
        pageIndex += 1;
        currPage = pageCollection[pageIndex];
        if (selectedCMD == null)
        {
            pastPageInfo[0] = pageIndex;
        }
        Wait(0.2);
    }

rule: "Subtract Index Page"
    Event.OngoingPlayer
    if (menuOpen)
    if (selectedCMD == null || currParam == "Array")
    if (IsButtonHeld(EventPlayer(), Button.Ability1))
    {
        selectionCursor[selectedIndex] = " ";
        selectedIndex = 0;
        selectionCursor[0] = ">";
        if (pageIndex == 0)
        {
            pageIndex = CountOf(pageCollection) - 1;
            currPage = pageCollection[pageIndex];
            Abort();
        }
        pageIndex -= 1;
        currPage = pageCollection[pageIndex];
        Wait(0.2);
    }

rule: "Add To Int"
    Event.OngoingPlayer 
    if (menuOpen)
    if (IsButtonHeld(EventPlayer(), Button.PrimaryFire))
    if (numArg < numMax)
    if (currParam == "Num")
    {
        tempNumSel = 2;
        ChaseVariableAtRate(numArg, numMax, tempNumSel, RateChaseReevaluation.DestinationAndRate);
        ChaseVariableOverTime(tempNumSel, maxNumRate, 30, TimeChaseReevaluation.DestinationAndDuration);
    }

rule: "Stop Add To Int"
    Event.OngoingPlayer
    if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire) || numArg >= numMax || !menuOpen)
    {
        if (numArg > numMax)
        {
            numArg = numMax;
        }
        StopChasingVariable(numArg);
        StopChasingVariable(tempNumSel);
    }

rule: "Sub Int"
    Event.OngoingPlayer
    if (menuOpen)
    if (IsButtonHeld(EventPlayer(), Button.SecondaryFire))
    if (!numArg <= numMin)
    if (currParam == "Num")
    {
        tempNumSel = 2;
        ChaseVariableAtRate(numArg, numMin, tempNumSel, RateChaseReevaluation.DestinationAndRate);
        ChaseVariableOverTime(tempNumSel, maxNumRate, 30, TimeChaseReevaluation.DestinationAndDuration);
    }

rule: "Stop Sub Int"
    Event.OngoingPlayer
    if (!IsButtonHeld(EventPlayer(), Button.SecondaryFire) || numArg <= numMin || !menuOpen)
    {
        if (numArg < numMin)
        {
            numArg = numMin;
        }
        StopChasingVariable(numArg);
        StopChasingVariable(tempNumSel);
    }




rule: "Select Index"
    Event.OngoingPlayer
    if (menuOpen)
    if (IsButtonHeld(EventPlayer(), Button.Reload))
    {
        Wait(0.276);
        AbortIfConditionIsFalse();
        if (selectedCMD == null)
        {
            pastPageInfo[0] = pageIndex;
        }
        InputHandler(currPage[selectedIndex]);
        PlayEffect(EventPlayer(), PlayEffect.BuffExplosionSound, Color.Aqua, EyePosition(EventPlayer()), 9);
        if (selectedCMD == "Force Command" && CountOf(ReturnParameters(argCollection[1])) != 0) //check if force command is in need of args
        {
            if (ParamComplete(argCollection[1], ArraySlice(argCollection, 3, CountOf(argCollection))))
            {
                Wait(0.016);
                ExecuteCMD(selectedCMD, EventPlayer());
                Wait(0.016);
                ClearParams();
                Abort();
            }
            argCollection = Append(argCollection, ReturnParameters(argCollection[1]));
            argCollection = Append([], argCollection);
            currParam = argCollection[paramIndex];
            SetupParameter(currParam);
            if (!ParamComplete(argCollection[1], ArraySlice(argCollection, 3, CountOf(argCollection)))) Abort();
        }
        if ((ParamComplete(selectedCMD, argCollection) && CountOf(ReturnParameters(selectedCMD)) != 0)) //|| (selectedCMD == "Force Command" && (ParamComplete(argCollection[1], ArraySlice(argCollection, 3, CountOf(argCollection))) || (CountOf(ReturnParameters(argCollection[1])) != 0))))
        {
            Wait(0.016);
            ExecuteCMD(selectedCMD, EventPlayer());
            Wait(0.016);
            ClearParams();
        }
    }




rule: "Recurse to Main Menu"
    Event.OngoingPlayer
    if (menuOpen)
    if (IsButtonHeld(EventPlayer(), Button.Melee))
    if (selectedCMD != null)
    {
        ResetMenu(EventPlayer());
    }















rule: "Clear Commands"
    Event.OngoingPlayer
    if (menuOpen)
    if (IsButtonHeld(EventPlayer(), Button.Interact))
    if (execList != null)
    if (!isExecuting)
    {
        execList = null;
        execString = " ";
    }

rule: "Prep Global Menu's"
    Event.OngoingGlobal
    {
        CreateHudText(consoleViewers,
        null,
        <" \n \n \n \n \n [Console] \n <0> ", consoleString>,
        null,
        Location.Right,
        1,
        Color.White,
        Color.White,
        Color.White,
        HudTextRev.VisibleToAndString,
        Spectators.DefaultVisibility);
    }


